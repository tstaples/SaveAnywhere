// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Game.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SaveAnywhere.SaveData {

  /// <summary>Holder for reflection information generated from Game.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class GameReflection {

    #region Descriptor
    /// <summary>File descriptor for Game.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GameReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpHYW1lLnByb3RvGgxDb21tb24ucHJvdG8iiQEKBlBsYXllchIaCghwb3Np",
            "dGlvbhgBIAEoCzIILlZlY3RvcjISFwoPY3VycmVudExvY2F0aW9uGAIgASgJ",
            "EhcKD2ZhY2luZ0RpcmVjdGlvbhgDIAEoBRIPCgdzdGFtaW5hGAQgASgCEg4K",
            "BmhlYWx0aBgFIAEoBRIQCghzd2ltbWluZxgGIAEoCCIyCgRHYW1lEhEKCXRp",
            "bWVPZkRheRgBIAEoBRIXCgZwbGF5ZXIYAiABKAsyBy5QbGF5ZXJCGKoCFVNh",
            "dmVBbnl3aGVyZS5TYXZlRGF0YWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::SaveAnywhere.SaveData.CommonReflection.Descriptor, },
          new pbr::GeneratedCodeInfo(null, new pbr::GeneratedCodeInfo[] {
            new pbr::GeneratedCodeInfo(typeof(global::SaveAnywhere.SaveData.Player), global::SaveAnywhere.SaveData.Player.Parser, new[]{ "Position", "CurrentLocation", "FacingDirection", "Stamina", "Health", "Swimming" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::SaveAnywhere.SaveData.Game), global::SaveAnywhere.SaveData.Game.Parser, new[]{ "TimeOfDay", "Player" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Player : pb::IMessage<Player> {
    private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
    public static pb::MessageParser<Player> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::SaveAnywhere.SaveData.GameReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Player() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Player(Player other) : this() {
      Position = other.position_ != null ? other.Position.Clone() : null;
      currentLocation_ = other.currentLocation_;
      facingDirection_ = other.facingDirection_;
      stamina_ = other.stamina_;
      health_ = other.health_;
      swimming_ = other.swimming_;
    }

    public Player Clone() {
      return new Player(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private global::SaveAnywhere.SaveData.Vector2 position_;
    public global::SaveAnywhere.SaveData.Vector2 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "currentLocation" field.</summary>
    public const int CurrentLocationFieldNumber = 2;
    private string currentLocation_ = "";
    public string CurrentLocation {
      get { return currentLocation_; }
      set {
        currentLocation_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "facingDirection" field.</summary>
    public const int FacingDirectionFieldNumber = 3;
    private int facingDirection_;
    public int FacingDirection {
      get { return facingDirection_; }
      set {
        facingDirection_ = value;
      }
    }

    /// <summary>Field number for the "stamina" field.</summary>
    public const int StaminaFieldNumber = 4;
    private float stamina_;
    public float Stamina {
      get { return stamina_; }
      set {
        stamina_ = value;
      }
    }

    /// <summary>Field number for the "health" field.</summary>
    public const int HealthFieldNumber = 5;
    private int health_;
    public int Health {
      get { return health_; }
      set {
        health_ = value;
      }
    }

    /// <summary>Field number for the "swimming" field.</summary>
    public const int SwimmingFieldNumber = 6;
    private bool swimming_;
    public bool Swimming {
      get { return swimming_; }
      set {
        swimming_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Player);
    }

    public bool Equals(Player other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Position, other.Position)) return false;
      if (CurrentLocation != other.CurrentLocation) return false;
      if (FacingDirection != other.FacingDirection) return false;
      if (Stamina != other.Stamina) return false;
      if (Health != other.Health) return false;
      if (Swimming != other.Swimming) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (position_ != null) hash ^= Position.GetHashCode();
      if (CurrentLocation.Length != 0) hash ^= CurrentLocation.GetHashCode();
      if (FacingDirection != 0) hash ^= FacingDirection.GetHashCode();
      if (Stamina != 0F) hash ^= Stamina.GetHashCode();
      if (Health != 0) hash ^= Health.GetHashCode();
      if (Swimming != false) hash ^= Swimming.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (CurrentLocation.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CurrentLocation);
      }
      if (FacingDirection != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FacingDirection);
      }
      if (Stamina != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Stamina);
      }
      if (Health != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Health);
      }
      if (Swimming != false) {
        output.WriteRawTag(48);
        output.WriteBool(Swimming);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (CurrentLocation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentLocation);
      }
      if (FacingDirection != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FacingDirection);
      }
      if (Stamina != 0F) {
        size += 1 + 4;
      }
      if (Health != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Health);
      }
      if (Swimming != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(Player other) {
      if (other == null) {
        return;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::SaveAnywhere.SaveData.Vector2();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.CurrentLocation.Length != 0) {
        CurrentLocation = other.CurrentLocation;
      }
      if (other.FacingDirection != 0) {
        FacingDirection = other.FacingDirection;
      }
      if (other.Stamina != 0F) {
        Stamina = other.Stamina;
      }
      if (other.Health != 0) {
        Health = other.Health;
      }
      if (other.Swimming != false) {
        Swimming = other.Swimming;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (position_ == null) {
              position_ = new global::SaveAnywhere.SaveData.Vector2();
            }
            input.ReadMessage(position_);
            break;
          }
          case 18: {
            CurrentLocation = input.ReadString();
            break;
          }
          case 24: {
            FacingDirection = input.ReadInt32();
            break;
          }
          case 37: {
            Stamina = input.ReadFloat();
            break;
          }
          case 40: {
            Health = input.ReadInt32();
            break;
          }
          case 48: {
            Swimming = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Game : pb::IMessage<Game> {
    private static readonly pb::MessageParser<Game> _parser = new pb::MessageParser<Game>(() => new Game());
    public static pb::MessageParser<Game> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::SaveAnywhere.SaveData.GameReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Game() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Game(Game other) : this() {
      timeOfDay_ = other.timeOfDay_;
      Player = other.player_ != null ? other.Player.Clone() : null;
    }

    public Game Clone() {
      return new Game(this);
    }

    /// <summary>Field number for the "timeOfDay" field.</summary>
    public const int TimeOfDayFieldNumber = 1;
    private int timeOfDay_;
    public int TimeOfDay {
      get { return timeOfDay_; }
      set {
        timeOfDay_ = value;
      }
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 2;
    private global::SaveAnywhere.SaveData.Player player_;
    public global::SaveAnywhere.SaveData.Player Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Game);
    }

    public bool Equals(Game other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TimeOfDay != other.TimeOfDay) return false;
      if (!object.Equals(Player, other.Player)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (TimeOfDay != 0) hash ^= TimeOfDay.GetHashCode();
      if (player_ != null) hash ^= Player.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (TimeOfDay != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TimeOfDay);
      }
      if (player_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Player);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (TimeOfDay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeOfDay);
      }
      if (player_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Player);
      }
      return size;
    }

    public void MergeFrom(Game other) {
      if (other == null) {
        return;
      }
      if (other.TimeOfDay != 0) {
        TimeOfDay = other.TimeOfDay;
      }
      if (other.player_ != null) {
        if (player_ == null) {
          player_ = new global::SaveAnywhere.SaveData.Player();
        }
        Player.MergeFrom(other.Player);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TimeOfDay = input.ReadInt32();
            break;
          }
          case 18: {
            if (player_ == null) {
              player_ = new global::SaveAnywhere.SaveData.Player();
            }
            input.ReadMessage(player_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
